{"version":3,"file":"static/js/11.1533d9aa.chunk.js","mappings":"sOAEaA,EAAcC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAOxBC,EAAcH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8LAUvBG,EAAgBL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qE,oBCjBzBK,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAE5CC,GAAaC,EAAAA,EAAAA,IACxB,CAACT,EALyB,SAAAC,GAAK,OAAIA,EAAMS,OAAQ,IAMjD,SAACR,EAAUS,GACT,OAAOT,EAASS,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,mBCHWE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXP,GAASQ,EAAAA,EAAAA,IAAYX,GAO3B,OAHAY,EAAAA,EAAAA,YAAU,WACRH,GAASI,EAAAA,EAAAA,MACX,GAAG,CAACJ,KAEFK,EAAAA,EAAAA,KAAC9B,EAAW,CAAA+B,UACVD,EAAAA,EAAAA,KAACxB,EAAa,CAAAyB,SACXZ,EAAOa,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIb,EAAIY,EAAJZ,KAAMc,EAAKF,EAALE,MAAK,OAC5BC,EAAAA,EAAAA,MAAChC,EAAW,CAAA2B,SAAA,CACTV,EAAK,MAAES,EAAAA,EAAAA,KAAA,QAAAC,SAAOI,KACfL,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASC,QAAS,kBAZxBC,EAYuCL,OAXtDT,GAASe,EAAAA,EAAAA,IAAcD,IADR,IAAAA,CAY0C,EAACR,SAAC,aAFnCG,EAKJ,OAKxB,E,UC7BaO,EAAS,WACpB,IAAMhB,GAAWC,EAAAA,EAAAA,MAIjB,OACEI,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,SAAOO,KAAK,OAAOhB,KAAK,SAASqB,SALlB,SAAHT,GAA+B,IAAfU,EAAKV,EAAfW,OAAUD,MAC9BlB,GAASoB,EAAAA,EAAAA,GAAaF,GACxB,KAMF,E,UCZaG,EAAa7C,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAOvB4C,EAAW9C,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uDAIrB6C,EAAU/C,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+BAGvB8C,EAAYhD,EAAAA,GAAAA,GAASiD,IAAAA,GAAA/C,EAAAA,EAAAA,GAAA,6E,oBCP5BgD,EAAmBC,EAAAA,GAAW,CAClC/B,KAAM+B,EAAAA,KACHC,QACC,yHACA,oCAEDC,SAAS,IACZC,OAAQH,EAAAA,KACLI,IAAI,EAAG,qBACPC,IAAI,GAAI,mBACRJ,QACC,6EACA,0BAEDC,SAAS,IACZ5C,SAAU0C,EAAAA,OAGCM,EAAQ,WACnB,IAAMjC,GAAWC,EAAAA,EAAAA,MACXN,GAAUO,EAAAA,EAAAA,IAAYnB,GAe5B,OACEsB,EAAAA,EAAAA,KAACgB,EAAU,CAAAf,UACTD,EAAAA,EAAAA,KAAC6B,EAAAA,GAAM,CACLR,iBAAkBA,EAClBS,SAAU,SAACjB,EAAOkB,IAlBP,SAAH5B,GAA0B,IAApBZ,EAAIY,EAAJZ,KAAMkC,EAAMtB,EAANsB,OACxB,GACEnC,EAAQ0C,MACN,SAAA1C,GAAO,OAAIA,EAAQmC,SAAWA,GAAUnC,EAAQC,OAASA,CAAI,IAG/D0C,EAAAA,GAAAA,MAAY,mCALd,CAQA,IAAMC,EAAc,CAAE3C,KAAAA,EAAMkC,OAAAA,GAC5B9B,GAASwC,EAAAA,EAAAA,IAAWD,IACpBE,QAAQC,IAAIH,EAHZ,CAIF,CAOQJ,CAASjB,GACTkB,EAAQO,WACV,EACAC,cAAe,CACbhD,KAAM,GACNkC,OAAQ,IACRxB,UAEFD,EAAAA,EAAAA,KAACwC,EAAAA,GAAI,CAAAvC,UACHK,EAAAA,EAAAA,MAACW,EAAQ,CAAAhB,SAAA,EACPD,EAAAA,EAAAA,KAACmB,EAAS,CAAAlB,SAAC,UACXD,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJlC,KAAK,OACLhB,KAAK,OACLmD,MAAM,yIACNlB,UAAQ,KAEVxB,EAAAA,EAAAA,KAAC2C,EAAAA,GAAY,CAACpD,KAAK,OAAOqD,UAAU,OACpC5C,EAAAA,EAAAA,KAACmB,EAAS,CAAAlB,SAAC,YACXD,EAAAA,EAAAA,KAACyC,EAAAA,GAAK,CACJlC,KAAK,MACLhB,KAAK,SACLmD,MAAM,gGACNlB,UAAQ,KAEVxB,EAAAA,EAAAA,KAAC2C,EAAAA,GAAY,CAACpD,KAAK,SAASqD,UAAU,OACtC5C,EAAAA,EAAAA,KAACkB,EAAO,CAACX,KAAK,SAAQN,SAAC,wBAMnC,EChFa4C,EAAO1E,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qEAKjByE,EAAQ3E,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6ECkB9B,EAdiB,WACf,IAAMU,GAAYc,EAAAA,EAAAA,IAAYf,GACxBG,GAAQY,EAAAA,EAAAA,IAAYb,GAC1B,OACEsB,EAAAA,EAAAA,MAACuC,EAAI,CAAA5C,SAAA,EACHD,EAAAA,EAAAA,KAAC8C,EAAK,CAAA7C,SAAC,eACPD,EAAAA,EAAAA,KAAC4B,EAAK,KACN5B,EAAAA,EAAAA,KAAC8C,EAAK,CAAA7C,SAAC,aACNlB,IAAcE,IAASe,EAAAA,EAAAA,KAAA,OAAAC,SAAK,gBAC7BD,EAAAA,EAAAA,KAACW,EAAM,KACPX,EAAAA,EAAAA,KAACN,EAAW,MAGlB,C","sources":["components/Phonebook/Contactlist/ContactList.style.jsx","components/redux/contacts.jsx/selectors.jsx","components/Phonebook/Contactlist/ContactList.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Form/Form.styles.jsx","components/Phonebook/Form/Form.jsx","components/App.style.jsx","components/pages/Contacts/Contacts.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const ContactWrap = styled.div`\n  text-align: center;\n  width: 370px;\n  border: 1px solid black;\n  border-radius: 10px;\n  padding: 30px;\n`;\nexport const ContactItem = styled.li`\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  border: 1px solid black;\n  border-radius: 10px;\n  gap: 10px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`;\nexport const ContactColect = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filters;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const filterUser = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactWrap, ContactItem, ContactColect } from './ContactList.style';\n\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'components/redux/contacts.jsx/operations';\nimport { filterUser } from 'components/redux/contacts.jsx/selectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterUser);\n  const onDelete = user => {\n    dispatch(deleteContact(user));\n  };\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <ContactWrap>\n      <ContactColect>\n        {filter.map(({ id, name, phone }) => (\n          <ContactItem key={id}>\n            {name}: <span>{phone}</span>\n            <button type=\"button\" onClick={() => onDelete(id)}>\n              Delete\n            </button>\n          </ContactItem>\n        ))}\n      </ContactColect>\n    </ContactWrap>\n  );\n};\n","import { statusFilter } from 'components/redux/contacts.jsx/filterSlice';\n\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterForm = ({ target: { value } }) => {\n    dispatch(statusFilter(value));\n  };\n  return (\n    <div>\n      <input type=\"text\" name=\"filter\" onChange={filterForm} />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormikWrap = styled.div`\n  text-align: center;\n  width: 370px;\n  border: 1px solid black;\n  border-radius: 10px;\n  padding: 30px;\n`;\nexport const FormWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport const ButForm = styled.button`\n  margin-top: 20px;\n`;\nexport const FormTitel = styled.h2`\n  font-family: Epilogue;\n  font-size: 30px;\n  font-weight: 600;\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { FormikWrap, FormWrap, ButForm, FormTitel } from './Form.styles';\nimport toast from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'components/redux/contacts.jsx/selectors';\nimport { addContact } from 'components/redux/contacts.jsx/operations';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name must not contain characters'\n    )\n    .required(''),\n  number: Yup.string()\n    .min(5, 'Too short  number')\n    .max(10, 'Too long number')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Must have only numbers'\n    )\n    .required(''),\n  contacts: Yup.array(),\n});\n\nexport const Forms = () => {\n  const dispatch = useDispatch();\n  const contact = useSelector(selectContacts);\n  const onSubmit = ({ name, number }) => {\n    if (\n      contact.find(\n        contact => contact.number === number || contact.name === name\n      )\n    ) {\n      toast.error('This contact already exists');\n      return;\n    }\n    const newContacts = { name, number };\n    dispatch(addContact(newContacts));\n    console.log(newContacts);\n  };\n\n  return (\n    <FormikWrap>\n      <Formik\n        validationSchema={validationSchema}\n        onSubmit={(value, actions) => {\n          onSubmit(value);\n          actions.resetForm();\n        }}\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n      >\n        <Form>\n          <FormWrap>\n            <FormTitel>Name</FormTitel>\n            <Field\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMessage name=\"name\" component=\"p\" />\n            <FormTitel>Number</FormTitel>\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              title=\"Number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessage name=\"number\" component=\"p\" />\n            <ButForm type=\"submit\">Add contact</ButForm>\n          </FormWrap>\n        </Form>\n      </Formik>\n    </FormikWrap>\n  );\n};\n","import styled from 'styled-components';\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\nexport const Titel = styled.h1`\n  font-family: Epilogue;\n  font-size: 40px;\n  font-weight: 600;\n`;\n","import { ContactList } from 'components/Phonebook/Contactlist/ContactList';\nimport { Filter } from 'components/Phonebook/Filter/Filter';\nimport { Forms } from 'components/Phonebook/Form/Form';\nimport { Wrap, Titel } from '../../App.style';\nimport { useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'components/redux/contacts.jsx/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return (\n    <Wrap>\n      <Titel>Phonebook</Titel>\n      <Forms />\n      <Titel>Contacts</Titel>\n      {isLoading && !error && <div>Loading...</div>}\n      <Filter />\n      <ContactList />\n    </Wrap>\n  );\n};\nexport default Contacts;\n"],"names":["ContactWrap","styled","_templateObject","_taggedTemplateLiteral","ContactItem","_templateObject2","ContactColect","_templateObject3","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","filterUser","createSelector","filters","filter","contact","name","toLowerCase","includes","ContactList","dispatch","useDispatch","useSelector","useEffect","fetchContacts","_jsx","children","map","_ref","id","phone","_jsxs","type","onClick","user","deleteContact","Filter","onChange","value","target","statusFilter","FormikWrap","FormWrap","ButForm","FormTitel","_templateObject4","validationSchema","Yup","matches","required","number","min","max","Forms","Formik","onSubmit","actions","find","toast","newContacts","addContact","console","log","resetForm","initialValues","Form","Field","title","ErrorMessage","component","Wrap","Titel"],"sourceRoot":""}