{"version":3,"file":"static/js/636.5a61afc8.chunk.js","mappings":"wOAEaA,EAAcC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAOxBC,EAAcH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8LAUvBG,EAAgBL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qE,oBCjBzBK,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAE5CC,GAAaC,EAAAA,EAAAA,IACxB,CAACT,EALyB,SAAAC,GAAK,OAAIA,EAAMS,OAAQ,IAMjD,SAACR,EAAUS,GACT,OAAOT,EAASS,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,SCPWE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXP,GAASQ,EAAAA,EAAAA,IAAYX,GAI3B,OACEY,EAAAA,EAAAA,KAAC5B,EAAW,CAAA6B,UACVD,EAAAA,EAAAA,KAACtB,EAAa,CAAAuB,SACXV,EAAOW,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIX,EAAIU,EAAJV,KAAMY,EAAKF,EAALE,MAAK,OAC5BC,EAAAA,EAAAA,MAAC9B,EAAW,CAAAyB,SAAA,CACTR,EAAK,MAAEO,EAAAA,EAAAA,KAAA,QAAAC,SAAOI,KACfL,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASC,QAAS,kBATxBC,EASuCL,OARtDP,GAASa,EAAAA,EAAAA,IAAcD,IADR,IAAAA,CAS0C,EAACR,SAAC,aAFnCG,EAKJ,OAKxB,E,UCtBaO,EAAS,WACpB,IAAMd,GAAWC,EAAAA,EAAAA,MAIjB,OACEE,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,SAAOO,KAAK,OAAOd,KAAK,SAASmB,SALlB,SAAHT,GAA+B,IAAfU,EAAKV,EAAfW,OAAUD,MAC9BhB,GAASkB,EAAAA,EAAAA,GAAaF,GACxB,KAMF,E,UCZaG,EAAa3C,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAOvB0C,EAAW5C,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uDAIrB2C,EAAU7C,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+BAGvB4C,EAAY9C,EAAAA,GAAAA,GAAS+C,IAAAA,GAAA7C,EAAAA,EAAAA,GAAA,6E,oBCR5B8C,EAAmBC,EAAAA,GAAW,CAClC7B,KAAM6B,EAAAA,KACHC,QACC,yHACA,oCAEDC,SAAS,IACZnB,MAAOiB,EAAAA,KACJG,IAAI,EAAG,oBACPC,IAAI,GAAI,kBACRH,QACC,6EACA,0BAEDC,SAAS,IACZ1C,SAAUwC,EAAAA,OAGCK,EAAQ,WACnB,IAAM9B,GAAWC,EAAAA,EAAAA,MACXN,GAAUO,EAAAA,EAAAA,IAAYnB,GAa5B,OACEoB,EAAAA,EAAAA,KAACgB,EAAU,CAAAf,UACTD,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACLP,iBAAkBA,EAClBQ,SAAU,SAAChB,EAAOiB,IAhBP,SAAH3B,GAAyB,IAAnBV,EAAIU,EAAJV,KAAMY,EAAKF,EAALE,MACxB,GACEb,EAAQuC,MAAK,SAAAvC,GAAO,OAAIA,EAAQa,QAAUA,GAASb,EAAQC,OAASA,CAAI,IAExEuC,EAAAA,GAAAA,MAAY,mCAHd,CAMA,IAAMC,EAAc,CAAExC,KAAAA,EAAMY,MAAAA,GAC5BR,GAASqC,EAAAA,EAAAA,IAAWD,IACpBE,QAAQC,IAAIH,EAHZ,CAIF,CAOQJ,CAAShB,GACTiB,EAAQO,WACV,EACAC,cAAe,CACb7C,KAAM,GACNY,MAAO,IACPJ,UAEFD,EAAAA,EAAAA,KAACuC,EAAAA,GAAI,CAAAtC,UACHK,EAAAA,EAAAA,MAACW,EAAQ,CAAAhB,SAAA,EACPD,EAAAA,EAAAA,KAACmB,EAAS,CAAAlB,SAAC,UACXD,EAAAA,EAAAA,KAACwC,EAAAA,GAAK,CACJjC,KAAK,OACLd,KAAK,OACLgD,MAAM,yIACNjB,UAAQ,KAEVxB,EAAAA,EAAAA,KAAC0C,EAAAA,GAAY,CAACjD,KAAK,OAAOkD,UAAU,OACpC3C,EAAAA,EAAAA,KAACmB,EAAS,CAAAlB,SAAC,YACXD,EAAAA,EAAAA,KAACwC,EAAAA,GAAK,CACJjC,KAAK,MACLd,KAAK,QACLgD,MAAM,+FACNjB,UAAQ,KAEVxB,EAAAA,EAAAA,KAAC0C,EAAAA,GAAY,CAACjD,KAAK,QAAQkD,UAAU,OACrC3C,EAAAA,EAAAA,KAACkB,EAAO,CAACX,KAAK,SAAQN,SAAC,wBAMnC,EC7Ea2C,EAAOvE,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qEAKjBsE,EAAQxE,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6ECGjBuE,EAAW,WACtB,IAAM7D,GAAYc,EAAAA,EAAAA,IAAYf,GACxBG,GAAQY,EAAAA,EAAAA,IAAYb,GAC1B,OACEoB,EAAAA,EAAAA,MAACsC,EAAI,CAAA3C,SAAA,EACHD,EAAAA,EAAAA,KAAC6C,EAAK,CAAA5C,SAAC,eACPD,EAAAA,EAAAA,KAAC2B,EAAK,KACN3B,EAAAA,EAAAA,KAAC6C,EAAK,CAAA5C,SAAC,aACNhB,IAAcE,IAASa,EAAAA,EAAAA,KAAA,OAAAC,SAAK,gBAC7BD,EAAAA,EAAAA,KAACW,EAAM,KACPX,EAAAA,EAAAA,KAACJ,EAAW,MAGlB,C","sources":["components/Phonebook/Contactlist/ContactList.style.jsx","components/redux/contacts.jsx/selectors.jsx","components/Phonebook/Contactlist/ContactList.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Form/Form.styles.jsx","components/Phonebook/Form/Form.jsx","components/App.style.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const ContactWrap = styled.div`\n  text-align: center;\n  width: 370px;\n  border: 1px solid black;\n  border-radius: 10px;\n  padding: 30px;\n`;\nexport const ContactItem = styled.li`\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  border: 1px solid black;\n  border-radius: 10px;\n  gap: 10px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`;\nexport const ContactColect = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filters;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const filterUser = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactWrap, ContactItem, ContactColect } from './ContactList.style';\n\nimport { deleteContact } from 'components/redux/contacts.jsx/operations';\nimport { filterUser } from 'components/redux/contacts.jsx/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(filterUser);\n  const onDelete = user => {\n    dispatch(deleteContact(user));\n  };\n  return (\n    <ContactWrap>\n      <ContactColect>\n        {filter.map(({ id, name, phone }) => (\n          <ContactItem key={id}>\n            {name}: <span>{phone}</span>\n            <button type=\"button\" onClick={() => onDelete(id)}>\n              Delete\n            </button>\n          </ContactItem>\n        ))}\n      </ContactColect>\n    </ContactWrap>\n  );\n};\n","import { statusFilter } from 'components/redux/contacts.jsx/filterSlice';\n\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterForm = ({ target: { value } }) => {\n    dispatch(statusFilter(value));\n  };\n  return (\n    <div>\n      <input type=\"text\" name=\"filter\" onChange={filterForm} />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormikWrap = styled.div`\n  text-align: center;\n  width: 370px;\n  border: 1px solid black;\n  border-radius: 10px;\n  padding: 30px;\n`;\nexport const FormWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nexport const ButForm = styled.button`\n  margin-top: 20px;\n`;\nexport const FormTitel = styled.h2`\n  font-family: Epilogue;\n  font-size: 30px;\n  font-weight: 600;\n`;\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { FormikWrap, FormWrap, ButForm, FormTitel } from './Form.styles';\nimport toast from 'react-hot-toast';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts } from 'components/redux/contacts.jsx/selectors';\nimport { addContact } from 'components/redux/contacts.jsx/operations';\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name must not contain characters'\n    )\n    .required(''),\n  phone: Yup.string()\n    .min(5, 'Too short  phone')\n    .max(10, 'Too long phone')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Must have only numbers'\n    )\n    .required(''),\n  contacts: Yup.array(),\n});\n\nexport const Forms = () => {\n  const dispatch = useDispatch();\n  const contact = useSelector(selectContacts);\n  const onSubmit = ({ name, phone }) => {\n    if (\n      contact.find(contact => contact.phone === phone || contact.name === name)\n    ) {\n      toast.error('This contact already exists');\n      return;\n    }\n    const newContacts = { name, phone };\n    dispatch(addContact(newContacts));\n    console.log(newContacts);\n  };\n\n  return (\n    <FormikWrap>\n      <Formik\n        validationSchema={validationSchema}\n        onSubmit={(value, actions) => {\n          onSubmit(value);\n          actions.resetForm();\n        }}\n        initialValues={{\n          name: '',\n          phone: '',\n        }}\n      >\n        <Form>\n          <FormWrap>\n            <FormTitel>Name</FormTitel>\n            <Field\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMessage name=\"name\" component=\"p\" />\n            <FormTitel>Number</FormTitel>\n            <Field\n              type=\"tel\"\n              name=\"phone\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessage name=\"phone\" component=\"p\" />\n            <ButForm type=\"submit\">Add contact</ButForm>\n          </FormWrap>\n        </Form>\n      </Formik>\n    </FormikWrap>\n  );\n};\n","import styled from 'styled-components';\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\nexport const Titel = styled.h1`\n  font-family: Epilogue;\n  font-size: 40px;\n  font-weight: 600;\n`;\n","import { ContactList } from 'components/Phonebook/Contactlist/ContactList';\nimport { Filter } from 'components/Phonebook/Filter/Filter';\nimport { Forms } from 'components/Phonebook/Form/Form';\nimport { Wrap, Titel } from '../App.style';\nimport { useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'components/redux/contacts.jsx/selectors';\nexport const Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return (\n    <Wrap>\n      <Titel>Phonebook</Titel>\n      <Forms />\n      <Titel>Contacts</Titel>\n      {isLoading && !error && <div>Loading...</div>}\n      <Filter />\n      <ContactList />\n    </Wrap>\n  );\n};\n"],"names":["ContactWrap","styled","_templateObject","_taggedTemplateLiteral","ContactItem","_templateObject2","ContactColect","_templateObject3","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","filterUser","createSelector","filters","filter","contact","name","toLowerCase","includes","ContactList","dispatch","useDispatch","useSelector","_jsx","children","map","_ref","id","phone","_jsxs","type","onClick","user","deleteContact","Filter","onChange","value","target","statusFilter","FormikWrap","FormWrap","ButForm","FormTitel","_templateObject4","validationSchema","Yup","matches","required","min","max","Forms","Formik","onSubmit","actions","find","toast","newContacts","addContact","console","log","resetForm","initialValues","Form","Field","title","ErrorMessage","component","Wrap","Titel","Contacts"],"sourceRoot":""}